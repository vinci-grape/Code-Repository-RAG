Summary of the code in ./youtube-dl/youtube_dl/extractor/cspan.py

Purpose
- Implement a YouTube-DL extractor for C-SPAN video pages. It resolves various embedded video players (JWPlayer, Brightcove, Ustream) and older C-SPAN page formats, producing per-video or playlist entries with proper formats, metadata, and subtitles when available.

Key class
- CSpanIE(InfoExtractor): Main extractor class for C-SPAN.
  - _VALID_URL: Regex to match C-SPAN video pages, capturing a hex id.
  - _TESTS: Several representative test cases covering different embed types and page formats.
  - BRIGHTCOVE_URL_TEMPLATE: Template used to reconstruct Brightcove player URLs from HTML attributes.

Main workflow in _real_extract(self, url)
- Fetch page: video_id = self._match_id(url); download the webpage.
- Embedded Ustream handling:
  - If a Ustream URL is found via UstreamIE._extract_url(webpage), return a UstreamIE result immediately.
- Brightcove embed handling (fallback when &vod not in URL):
  - Search for an element with id 'brightcove-player-embed'. If found, extract data-bc attributes and build a Brightcove URL using BRIGHTCOVE_URL_TEMPLATE.
  - Return a result for the Brightcove video, smuggling the source page URL as source_url.
- JW Player path (newer/primary path as of 2020):
  - Look for a jwsetup JSON blob on the page, convert to JSON, and parse with JWPlayer data via _parse_jwplayer_data.
  - Add Referer header to all formats using the original page URL.
  - Normalize subtitle URLs (convert php-based URLs to vtt if needed).
  - Merge JWPlayer data with JSON-LD data (_search_json_ld) and page metadata (title, description, thumbnail, timestamp, duration, view_count, etc.).
  - Return merged dict containing formats, metadata, and subtitles.
- Obsolete/legacy flow (older C-SPAN formats):
  - Try to determine video_type ('clip' or 'program') and video_id from legacy page patterns (clipid/progid or data-clipid/data-progid).
  - Fallback to Senate ISVP page if present.
  - If a jwsetup clipprog id is found, treat as program.
  - If video_type/id cannot be found, look for VLplayer-error-message and raise as ExtractorError if present.
- Data-driven fetch for legacy pages:
  - Build a request to http://www.c-span.org/assets/player/ajax-player.php?os=android&html5=<type>&id=<id>, retrieving a JSON structure data['video'].
  - Validate data['@status'] == 'Success', else raise ExtractorError with the server-provided error.
  - Fetch metadata XML from http://www.c-span.org/common/services/flashXml.php?... to obtain title and poster (thumbnail).
  - Extract general description from the page via HTML meta and/or itemprop description if present.
  - Build per-part entries based on data['files']:
    - If a part includes 'qualities': create formats with format_id (bitrate-height), url, height, and tbr (bitrate).
    - If no qualities and a path is provided, handle m3u8 sources via _extract_m3u8_formats or fall back to a direct URL.
  - For each part, assemble:
    - id: "<video_id>_<part_number>"
    - title: original title or "title part N" if multiple parts
    - formats: list of formats (sorted later)
    - description, thumbnail, duration
    - subtitles: if capfile exists, provide English subtitle track with appropriate extension (ext derived from capfile)
- Output:
  - If there is a single part, return that entry directly, with id adjusted to 'c<video_id>' for clips or '<video_id>' for others.
  - If multiple parts, return a playlist dict with:
    - _type: 'playlist'
    - entries: list of per-part entries
    - title: page/title derived from metadata
    - id: 'c<video_id>' for clips or '<video_id>' for others

Important implementation details
- Robust handling of multiple embed types:
  - Ustream: detected and handled early.
  - Brightcove: detected via embed tag, reconstructed with HTML data attributes.
  - JWPlayer: primary modern path using jwsetup data, merged with LD data and page metadata.
  - Legacy paths: handle old clip/program formats with AJAX/XML data lookups.
- Metadata and formatting:
  - Title and description are pulled from page metadata, including Open Graph and HTML elements.
  - Thumbnail and upload timestamp extracted from an XML document (flashXml.php) when using legacy paths.
  - Subtitles are supported; when capfile is present, added as an English subtitle track with proper extension handling (php → vtt as needed).
  - Formats can include multiple qualities, or fall back to m3u8/hls or direct URLs.
- Helper usage:
  - _download_webpage, _search_regex, _parse_json, _download_json, _download_xml for data acquisition.
  - _parse_jwplayer_data to convert JWPlayer data into standard YouTube-DL format dictionaries.
  - _search_json_ld to augment metadata from LD+JSON.
  - get_element_by_class/get_element_by_attribute/_og_search_title/_html_search_meta for page metadata extraction.
  - determine_ext, int_or_none, str_to_int for robust type/extension handling.
  - merge_dicts to combine metadata from multiple sources.
  - smuggle_url to attach source_url context for Brightcove embeds.
- Error handling:
  - If the AJAX data indicates failure, an ExtractorError is raised with the provided error text.
  - If unable to determine video_id/type, an ExtractorError is raised, possibly with any available on-page error message.
- Edge cases:
  - Audio-only pages are present in tests as an “only_matching” case, ensuring the extractor does not mis-handle non-video content.
  - The code includes compatibility logic for various historical page structures and embedded players.

Overall, this extractor integrates multiple C-SPAN video delivery mechanisms (Ustream, Brightcove, JWPlayer, and legacy AJAX/XML flows) to return either a single video entry or a playlist of multi-part videos, enriched with metadata, thumbnails, durations, and subtitles when available.