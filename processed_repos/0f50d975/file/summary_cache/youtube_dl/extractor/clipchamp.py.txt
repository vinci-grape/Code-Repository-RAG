concise summary of clipchamp.py

- Purpose
  - Implement an InfoExtractor for clipchamp.com watch pages. It retrieves video metadata and streaming formats (DASH and HLS) served via Cloudflare Stream.

- Key class
  - ClipchampIE (inherits from InfoExtractor)

- URL pattern
  - _VALID_URL matches https://www.clipchamp.com/watch/{id} (id is alphanumeric with dashes)

- Main functionality (_real_extract)
  - Extract video_id from URL and download the page.
  - Parse Next.js data from the page to obtain video metadata at:
    props.pageProps.video
  - Validate storage_location is cf_stream; otherwise raise ExtractorError.
  - Get download_url path and fetch the corresponding Cloudflare Stream iframe page.
  - Resolve a subdomain from the iframe content via regex on customer-domain-prefix; if not found, fall back to a default subdomain.
  - Build streaming formats from Cloudflare Stream manifests:
    - MPD/DASH: https://{subdomain}.cloudflarestream.com/{path}/manifest/video.mpd
    - M3U8/HLS: https://{subdomain}.cloudflarestream.com/{path}/manifest/video.m3u8
    - Include query parameter parentOrigin=https://clipchamp.com
    - Use _extract_mpd_formats and _extract_m3u8_formats; allow fatal=False so missing formats donâ€™t abort.
  - Assemble final information dictionary via merge_dicts:
    - id, formats
    - uploader: constructed by concatenating creator.first_name and creator.last_name if present
    - title: from data.project.project_name
    - timestamp: from data.created_at converted via unified_timestamp
    - thumbnail: data.thumbnail_url (validated via url_or_none)
  - The merge uses rev=True to allow data-derived fields to override the base ones as needed.

- Data handling details
  - Uses _search_nextjs_data to access Next.js-initialized data.
  - uploader extraction uses traverse_obj with a path that safely handles missing creator/name fields.
  - The thumbnail uses url_or_none to ensure a valid URL or None if absent.

- Constants and helpers
  - _STREAM_URL_TMPL and _STREAM_URL_QUERY define how the Cloudflare Stream URLs are constructed and queried.
  - _TESTS includes a sample URL with expected id, ext, title, uploader, timestamp, upload_date, thumbnail pattern, and download behavior hint.

- Important implementation notes
  - The extractor expects the Cloudflare Stream setup (cf_stream) and handles potential subdomain variability by parsing the iframe; a fallback subdomain is provided.
  - DASH and HLS formats are gathered when available, giving robust coverage for different clients.
  - Uses compatibility and utility helpers (compat_str, T, merge_dicts, traverse_obj, unified_timestamp, url_or_none) to normalize data types and safely navigate nested structures.