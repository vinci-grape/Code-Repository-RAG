Summary of Democracynow extractor (youtube-dl/youtube_dl/extractor/democracynow.py)

What it does
- Extracts video/audio formats and subtitles from democracynow.org pages.
- Builds a unified MediaInfo dictionary with id, title, description, thumbnail, formats, and subtitles suitable for download.

Main class and key components
- DemocracynowIE(InfoExtractor)
  - _VALID_URL: Matches Democracynow URLs (http/https, optional www) and captures the path as id.
  - IE_NAME: 'democracynow'
  - _real_extract(url): Core extraction logic.

Extraction workflow
1) Identify and fetch page
   - display_id = self._match_id(url)
   - webpage = self._download_webpage(url, display_id)

2) Parse embedded JSON data
   - Extracts a JSON blob from a script tag with type="text/json" using _search_regex.
   - json_data = self._parse_json(the_extracted_blob, display_id)

3) Video formats
   - title = json_data['title']
   - Iterates over potential media keys: 'file', 'audio', 'video', 'high_res_video'
     - For each existing key, builds an absolute media URL (joining with page URL, then stripping any query parameters).
     - Derives video_id from the media URL basename, stripping a leading 'dn' if present.
     - Appends a format entry: {'url': media_url, 'vcodec': 'none' if key == 'audio' else None}
   - Calls self._sort_formats(formats)

4) Subtitles
   - Initializes default_lang = 'en' and an empty subtitles dict.
   - add_subtitle_item(lang, info_dict): helper to append subtitle entries per language.
   - caption_file (if present) is added as a default-language subtitle (not treated as a chapter file).
   - json_data.get('captions', []) is iterated to add more subtitles; language is lowered or defaults to 'en'.

5) Description and metadata
   - description = self._og_search_description(webpage, default=None)
   - thumbnail = json_data.get('image')

6) Return metadata
   - id: video_id if found, else display_id
   - title, description, thumbnail
   - subtitles, formats

Important implementation details
- JSON data extraction: The extractor reads a JSON object embedded in a script tag with type="text/json" and parses it to obtain media URLs and metadata.
- Media URL handling: Media URLs are resolved against the page URL, any query parameters are stripped (to get clean direct file URLs), and URLs are made absolute with urljoin.
- Video ID derivation: Attempts to derive a stable ID from the media URL basename by removing a leading 'dn' if present (using remove_start and os.path.splitext on url_basename).
- Format entries: Distinguishes audio formats (vcodec set to 'none') from video formats (vcodec left as None). All formats are numerically sorted by _sort_formats.
- Subtitles: Supports a caption_file (as a default-language subtitle) and additional captions provided in the JSON with language metadata. All subtitles use absolute URLs via urljoin.
- Description extraction: Uses Open Graph description if available (_og_search_description).

Tests
- _TESTS includes two cases:
  - URL: http://www.democracynow.org/shows/2015/7/3
    - Expects id '2015-0703-001', extension 'mp4', specific title and description md5.
  - URL: http://www.democracynow.org/2015/7/3/this_flag_comes_down_today_bree
    - Expects similar id and mp4, with a different title/description.
    - skip_download: True in params for this test (metadata only).

Overall, this extractor focuses on pulling a single JSON payload from the page, enumerating available media URLs to build a list of formats, assembling subtitles from caption data, and returning a structured info dictionary compatible with youtube-dlâ€™s internal formats.