Concise summary of the code in ./youtube-dl/test/test_downloader_http.py

- Purpose
  - Unit tests for the HttpFD downloader in youtube-dl, focusing on HTTP download behavior under different server capabilities (Range support and Content-Length presence).

- Key components
  - HTTPTestRequestHandler (extends compat_http_server.BaseHTTPRequestHandler)
    - log_message overridden to suppress logs.
    - send_content_range(self, total=None): parses the Range header (bytes=start-end), sets a proper Content-Range response header when valid, and returns the number of bytes in the range (or total if no valid range).
    - serve(self, range=True, content_length=True): builds a response with:
      - Content-Type: video/mp4
      - Optional Content-Range header (via send_content_range)
      - Optional Content-Length header (size determined by range presence)
      - Body consisting of '#' bytes, with size equals to either the full TEST_SIZE or the range size.
    - do_GET(self): serves one of four endpoints:
      - /regular: full response with all headers (default)
      - /no-content-length: without Content-Length header
      - /no-range: without Range support
      - /no-range-no-content-length: without both Range and Content-Length
  - TestHttpFD (unittest.TestCase)
    - setUp: spins up a local HTTP server on 127.0.0.1 with an ephemeral port in a background thread.
    - download(self, params, ep)
      - Creates a YoutubeDL instance and an HttpFD downloader with given params.
      - Downloads from http://127.0.0.1:<port>/<ep> into testfile.mp4.
      - Asserts the download succeeds and that the file size equals TEST_SIZE (10240 bytes).
      - Cleans up the downloaded file.
    - download_all(self, params): runs download() for all four endpoints: regular, no-content-length, no-range, no-range-no-content-length.
    - test_regular: calls download_all with default params.
    - test_chunked: calls download_all with http_chunk_size set to 1000 to test chunked transfer behavior.
  - Helpers
    - FakeLogger, http_server_port, try_rm from test.helper
    - encodeFilename used to create OS-safe filenames

- Main functionality and behavior being tested
  - The HttpFD downloader must handle:
    - Regular responses with Content-Length and optional Range.
    - Responses with Range requests (via Range header) and corresponding Content-Range.
    - Responses lacking Content-Length.
    - Responses lacking Range support.
    - Scenarios where neither Content-Length nor Range is provided (unknown total size).
    - Chunked transfer mode (http_chunk_size) to ensure proper reading in chunks.
  - Validation is performed by ensuring the downloaded file is exactly TEST_SIZE bytes.

- Important implementation details
  - The test server emulates realistic HTTP behavior by conditioning Content-Length and Content-Range headers and by optionally omitting them.
  - The downloaded content is deterministic (# characters) to simplify size verification.
  - The server runs in a separate daemon thread to avoid blocking tests.
  - File cleanup is performed after each download to avoid residue files between tests.

- Outcome
  - Ensures HttpFD can robustly download from HTTP servers with varying header support, both in regular and chunked modes.